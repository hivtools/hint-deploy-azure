targetScope = 'resourceGroup'

// ------------------
//    PARAMETERS
// ------------------

@description('The location where the resources will be created.')
param location string = resourceGroup().location

@description('The prefix to use for all resource names')
param prefix string = 'nm'

// ------------------
// Network
// ------------------

param vnetSettings object = {
  name: '${prefix}-hint-nw'
  location: location
  addressPrefixes: [
    {
      name: '${prefix}-hint-nw'
      addressPrefix: '10.0.0.0/16'
    }
  ]
  subnets: [
    {
      name: '${prefix}-hint-subnet'
      addressPrefix: '10.0.1.0/24'
      service: 'Microsoft.Web/serverFarms'
      public: false
    }
    {
      name: '${prefix}-hint-db-migrate-subnet'
      addressPrefix: '10.0.2.0/24'
      service: 'Microsoft.ContainerInstance/containerGroups'
      public: false
    }
    {
      name: '${prefix}-hint-db-subnet'
      addressPrefix: '10.0.3.0/24'
      service: 'Microsoft.DBforPostgreSQL/flexibleServers'
      public: false
    }
    {
      name: '${prefix}-hintr-subnet'
      addressPrefix: '10.0.4.0/24'
      service: 'Microsoft.App/environments'
      public: false
    }
    {
      name: '${prefix}-gateway-subnet'
      addressPrefix: '10.0.5.0/24'
      public: true
    }
  ]
}

module vnetModule './network.bicep' = {
  name: 'vnetDeploy'
  params: {
    vnetSettings: vnetSettings
  }
}

var vnetInfo = vnetModule.outputs.vnetInfo

// ------------------
// Private DNS database
// ------------------

@description('DNS Zone name')
param dnsZoneName string = 'hint-private-dns'

@description('Fully Qualified DNS Private Zone')
param dnsZoneFqdn string = '${dnsZoneName}.postgres.database.azure.com'

@description('Postgres private DNS subnet ID')
var postgresSubnetResourceId = '${vnetLink.properties.virtualNetwork.id}/subnets/${prefix}-hint-db-subnet'

resource dnszone 'Microsoft.Network/privateDnsZones@2020-06-01' = {
  name: dnsZoneFqdn
  location: 'global'
  dependsOn: [vnetModule]
}

resource vnetLink 'Microsoft.Network/privateDnsZones/virtualNetworkLinks@2020-06-01' = {
  name: '${prefix}-hint-nw-link'
  parent: dnszone
  location: 'global'
  properties: {
    registrationEnabled: false
    virtualNetwork: {
      id: vnetInfo.vnet.id
    }
  }
}

// ------------------
// CONTAINER APP ENVIRONMENT
// ------------------

@description('The name of the container apps environment. If set, it overrides the name generated by the template.')
param containerAppsEnvironmentName string = 'hint-env'

@description('The name of the log analytics workspace. If set, it overrides the name generated by the template.')
param logAnalyticsWorkspaceName string = 'hint-log-workspace'

@description('The name of the hint workload profile for general containers')
param hintWorkloadProfileName string = 'hint-profile'

@description('The name of the hint workload profile for running models')
param workerWorkloadProfileName string = 'worker-profile'

resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2021-06-01' = {
  name: logAnalyticsWorkspaceName
  location: location
  properties: any({
    features: {
      searchVersion: 1
    }
    sku: {
      name: 'PerGB2018'
    }
    retentionInDays: 30
  })
}

resource containerAppsEnvironment 'Microsoft.App/managedEnvironments@2024-03-01' = {
  name: containerAppsEnvironmentName
  location: location
  properties: {
    appLogsConfiguration: {
      destination: 'log-analytics'
      logAnalyticsConfiguration: {
        customerId: logAnalyticsWorkspace.properties.customerId
        sharedKey: logAnalyticsWorkspace.listKeys().primarySharedKey
      }
    }
    workloadProfiles: [
      {
        name: 'Consumption'
        workloadProfileType: 'Consumption'
      }
      {
        minimumCount: 0
        maximumCount: 2
        name: hintWorkloadProfileName
        workloadProfileType: 'E4'
      }
      {
        minimumCount: 0
        maximumCount: 2
        name: workerWorkloadProfileName
        workloadProfileType: 'E8'
      }
    ]
    vnetConfiguration: {
      infrastructureSubnetId: vnetInfo.subnets['${prefix}-hintr-subnet'].id
      internal: false
    }
  }
}
// ------------------
// STORAGE
// ------------------

@description('The name of the external Azure Storage Account.')
param storageAccountName string

var storageSettings = {
  storageAccountName: storageAccountName
  location: location
  containerAppEnvironmentName: containerAppsEnvironmentName
  privateEndpointSubnet: vnetInfo.subnets['${prefix}-gateway-subnet'].id
  vnetName: vnetInfo
  fileShares: {
    uploads: {
      name: 'uploads'
    }
    results: {
      name: 'results'
    }
    config: {
      name: 'config'
    }
    redis: {
      name: 'redis'
    }
  }
}

module storageModule './storage.bicep' = {
  name: 'storageDeploy'
  params: {
    storageSettings: storageSettings
  }
}

// ------------------
// REDIS
// ------------------

@description('redis container app name')
param redisName string

@description('Name of redis volume')
param redisVolume string = 'redis-volume'

@description('Redis docker image to use')
param redisImage string

resource redis 'Microsoft.App/containerApps@2024-10-02-preview' = {
  name: redisName
  location: location
  properties: {
    managedEnvironmentId: containerAppsEnvironment.id
    configuration: {
      ingress: {
        external: true
        targetPort: 6379
        allowInsecure: false
        transport: 'tcp'
      }
    }
    template: {
      containers: [
        {
          name: 'redis'
          image: redisImage
          command: [
            'redis-server'
          ]
          args: [
            '--appendonly'
            'yes'
          ]
          resources: {
            cpu: json('0.25')
            memory: '0.5Gi'
          }
          volumeMounts: [
            {
              volumeName: redisVolume
              mountPath: '/data'
            }
          ]
        }
      ]
      scale: {
        minReplicas: 1
        maxReplicas: 1
      }
      volumes: [
        {
          name: redisVolume
          storageType: 'NfsAzureFile'
          storageName: storageModule.outputs.storageInfo.redis.mountNameRW
        }
      ]
    }
    workloadProfileName: 'Consumption'
  }
}

var redisInfo = {
  hostname: redisName
  port: '6379'
  connectionString: 'redis://${redisName}:6379'
}

// module redisModule 'redis.bicep' = {
//   name: 'redis-module'
//   params: {
//     privateEndpointSubnet: vnetInfo.subnets['${prefix}-gateway-subnet'].id
//     vnetName: vnetInfo.vnet.name
//   }
// }

// var redisInfo = redisModule.outputs.redisInfo

// ------------------
// HINTR
// ------------------

@description('hintr container app name')
param hintrName string

@description('hintr docker image to use')
param hintrImage string

@description('Name of uploads volume')
param uploadsVolume string = 'uploads-volume'

@description('Name of results volume')
param resultsVolume string = 'results-volume'

@description('Name of config volume')
param configVolume string = 'config-volume'

resource hintr 'Microsoft.App/containerApps@2024-10-02-preview' = {
  name: hintrName
  location: location
  properties: {
    managedEnvironmentId: containerAppsEnvironment.id
    configuration: {
      ingress: {
        external: true
        targetPort: 8888
        allowInsecure: true
      }
    }
    template: {
      containers: [
        {
          name: 'hintr'
          image: hintrImage
          command: [
            '/usr/local/bin/hintr_api'
          ]
          args: [
            '--workers'
            '0'
            '--results-dir'
            '/results'
            '--inputs-dir'
            '/uploads'
            '--port'
            '8888'
            '--health-check-interval'
            // Azure closes idle tcp connection after 4 mins, so make interval
            // slighty less than this
            '210'
          ]
          env: [
            {
              name: 'REDIS_URL'
              value: redisInfo.connectionString
            }
          ]
          resources: {
            cpu: json('1')
            memory: '2Gi'
          }
          volumeMounts: [
            {
              volumeName: uploadsVolume
              mountPath: '/uploads'
            }
            {
              volumeName: resultsVolume
              mountPath: '/results'
            }
          ]
        }
      ]
      scale: {
        minReplicas: 0
        maxReplicas: 2
      }
      volumes: [
        {
          name: uploadsVolume
          storageType: 'NfsAzureFile'
          storageName: storageModule.outputs.storageInfo.uploads.mountNameR
        }
        {
          name: resultsVolume
          storageType: 'NfsAzureFile'
          storageName: storageModule.outputs.storageInfo.results.mountNameRW
        }
      ]
    }
    workloadProfileName: 'Consumption'
  }
}

// ------------------
// HINTR workers
// ------------------

@description('hintr worker container app name')
param hintrWorkerName string

@description('hintr worker docker image to use')
param hintrWorkerImage string

resource hintrWorker 'Microsoft.App/containerApps@2024-10-02-preview' = {
  name: hintrWorkerName
  location: location
  properties: {
    managedEnvironmentId: containerAppsEnvironment.id
    template: {
      containers: [
        {
          name: 'hintr-worker'
          image: hintrWorkerImage
          command: [
            '/usr/local/bin/hintr_worker'
          ]
          args: [
            '--calibrate-only'
          ]
          env: [
            {
              name: 'REDIS_URL'
              value: redisInfo.connectionString
            }
          ]
          resources: {
            cpu: json('1')
            memory: '2Gi'
          }
          volumeMounts: [
            {
              volumeName: uploadsVolume
              mountPath: '/uploads'
            }
            {
              volumeName: resultsVolume
              mountPath: '/results'
            }
          ]
        }
      ]
      scale: {
        minReplicas: 1
        maxReplicas: 1
      }
      volumes: [
        {
          name: uploadsVolume
          storageType: 'NfsAzureFile'
          storageName: storageModule.outputs.storageInfo.uploads.mountNameR
        }
        {
          name: resultsVolume
          storageType: 'NfsAzureFile'
          storageName: storageModule.outputs.storageInfo.results.mountNameRW
        }
      ]
    }
    workloadProfileName: 'Consumption'
  }
  dependsOn: [
    hintr
  ]
}

// ------------------
// Database
// ------------------

@secure()
@description('PostgreSQL administrator password')
param adminDbPassword string

@description('Tag of the DB migrate docker image to use')
param dbMigrateImage string

@description('Tag of the DB migrate docker image to use')
param dbMigrateName string = '${prefix}-db-migrate'

var dbSettings = {
  location: location
  prefix: prefix
  adminDbPassword: adminDbPassword
  dbMigrateName: dbMigrateName
  dbMigrateImage: dbMigrateImage
  postgresSubnetResourceId: postgresSubnetResourceId
  dbMigrateSubnetId: vnetInfo.subnets['${prefix}-hint-db-migrate-subnet'].id
  dnsZoneId: dnszone.id
}

module dbModule './db.bicep' = {
  name: 'dbDeploy'
  params: {
    dbSettings: dbSettings
  }
}

var dbInfo = dbModule.outputs.dbInfo

// ------------------
// Reverse proxy
// ------------------

@description('reverse proxy name')
param proxyName string = 'nm-proxy'

@description('hint web app name')
param proxyImage string

@description('External URL the proxy is at')
var proxyUrl = '${proxyName}.${containerAppsEnvironment.properties.defaultDomain}'

resource proxy 'Microsoft.App/containerApps@2024-10-02-preview' = {
  name: proxyName
  location: location
  properties: {
    managedEnvironmentId: containerAppsEnvironment.id
    configuration: {
      ingress: {
        external: true
        targetPort: 80
        allowInsecure: true
      }
    }
    template: {
      containers: [
        {
          name: 'proxy'
          image: proxyImage
          args: [
            '${proxyUrl}'
            '80'
            '443'
          ]
          env: [
            {
              name: 'HINTR_NAME'
              value: hintrName
            }
            {
              name: 'REDIS_NAME'
              value: redisInfo.hostname
            }
            {
              name: 'REDIS_PORT'
              value: redisInfo.port
            }
            {
              name: 'REDIS_QUEUE_NAME'
              value: 'hintr:queue:run'
            }
          ]
          resources: {
            cpu: json('0.25')
            memory: '0.5Gi'
          }
        }
      ]
      scale: {
        minReplicas: 1
        maxReplicas: 1
      }
    }
    workloadProfileName: 'Consumption'
  }
}

@description('Docker container registry URL')
param azureCRUrl string

@description('Docker container registry username')
param azureCRUsername string

@secure()
@description('Azure Registry password')
param azureCRPassword string

module workerJobModule './worker_job.bicep' = {
  name: 'workerJob'
  params: {
    location: location
    containerAppsEnvironmentName: containerAppsEnvironmentName
    workloadProfile: workerWorkloadProfileName
    hintrWorkerImage: hintrWorkerImage
    proxyUrl: proxyUrl
    redisConnectionString: redisInfo.connectionString
    resultsVolume: resultsVolume
    resultsMount: storageModule.outputs.storageInfo.results.mountNameRW
    uploadsVolume: uploadsVolume
    uploadsMount: storageModule.outputs.storageInfo.uploads.mountNameR
    azureCRUrl: azureCRUrl
    azureCRUsername: azureCRUsername
    azureCRPassword: azureCRPassword
  }
  dependsOn: [
    containerAppsEnvironment
    proxy
  ]
}

// ------------------
// Hint web app
// ------------------
@secure()
@description('Avenir access token used to pull env vars from the auth server')
param avenirAccessToken string

@description('hint docker image to use')
param hintImage string

@description('hint web app name')
param hintWebAppName string = 'nm-hint'

@description('hint web app name')
param hintAppServicePlanName string = 'nm-hint-SP'

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' existing = {
  name: storageAccountName
}

resource appServicePlan 'Microsoft.Web/serverfarms@2024-04-01' = {
  name: hintAppServicePlanName
  location: location
  properties: {
    reserved: true
  }
  sku: {
    name: 'P0V3'
  }
  kind: 'linux'
}

resource diagnosticLogs 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = {
  name: appServicePlan.name
  scope: appServicePlan
  properties: {
    workspaceId: logAnalyticsWorkspace.id
    metrics: [
      {
        category: 'AllMetrics'
        enabled: true
      }
    ]
  }
}

// ------------------
// Private DNS for container apps
// ------------------

@description('Name for private endpoint to access container apps')
param privateEndpointName string = 'containerapp'

@description('DNS Zone name for container app')
param privateDnsName string = 'privatelink'

@description('Fully Qualified DNS Private Zone for container apps')
param privateDnsZoneName string = '${privateDnsName}.${location}.azurecontainerapps.io'

// resource privateEndpoint 'Microsoft.Network/privateEndpoints@2024-05-01' = {
//   name: privateEndpointName
//   location: location
//   properties: {
//     subnet: {
//       id: vnetInfo.subnets['${prefix}-gateway-subnet'].id
//     }
//     privateLinkServiceConnections: [
//       {
//         name: privateEndpointName
//         properties: {
//           privateLinkServiceId: containerAppsEnvironment.id
//           groupIds: [
//             'managedEnvironments'
//           ]
//         }
//       }
//     ]
//   }
// }

@description('Get just the ID of the container app environment')
var containerAppUniqueId = split(containerAppsEnvironment.properties.defaultDomain, '.')[0]

// module privateDnsZone 'ca_private_dns.bicep' = {
//   name: privateDnsZoneName
//   params: {
//     dnsZoneName: privateDnsZoneName
//     envDefaultDomain: containerAppUniqueId
//     privateEndpointId: privateEndpoint.properties.networkInterfaces[0].id
//     tags: {}
//     vnetName: vnetInfo.vnet.name
//   }
// }

// resource hintWebApp 'Microsoft.Web/sites@2024-04-01' = {
//   name: hintWebAppName
//   location: location
//   kind: 'app,linux,container'
//   properties: {
//     serverFarmId: appServicePlan.id
//     virtualNetworkSubnetId: vnetInfo.subnets['${prefix}-hint-subnet'].id
//     siteConfig: {
//       appSettings: [
//         {
//           name: 'AVENIR_ACCESS_TOKEN'
//           value: avenirAccessToken
//         }
//         {
//           name: 'APPLICATION_URL'
//           value: 'https://${hintWebAppName}.azurewebsites.net'
//         }
//         {
//           name: 'HINTR_URL'
//           value: 'http://${hintr.properties.configuration.ingress.fqdn}'
//         }
//         {
//           name: 'DB_URL'
//           value: 'jdbc:postgresql://${dbInfo.hostname}/${dbInfo.databaseName}'
//         }
//         {
//           name: 'DOCKER_REGISTRY_SERVER_URL'
//           value: 'https://ghcr.io'
//         }
//         {
//           name: 'WEBSITES_PORT'
//           value: '8080'
//         }
//       ]
//       linuxFxVersion: 'DOCKER|${hintImage}'
//       appCommandLine: '--azure'
//       azureStorageAccounts: {
//         uploadsMount: {
//           type: 'AzureFiles'
//           protocol: 'Nfs'
//           accountName: storageAccountName
//           accessKey: storageAccount.listKeys().keys[0].value
//           mountPath: '/uploads'
//           shareName: storageModule.outputs.storageInfo.uploads.shareName
//         }
//         resultsMount: {
//           type: 'AzureFiles'
//           protocol: 'Nfs'
//           accountName: storageAccountName
//           accessKey: storageAccount.listKeys().keys[0].value
//           mountPath: '/results'
//           shareName: storageModule.outputs.storageInfo.results.shareName
//         }
//         configMount: {
//           type: 'AzureFiles'
//           protocol: 'Nfs'
//           accountName: storageAccountName
//           accessKey: storageAccount.listKeys().keys[0].value
//           mountPath: '/etc/hint'
//           shareName: storageModule.outputs.storageInfo.config.shareName
//         }
//       }
//     }
//   }
// }

// resource diagnosticLogsWA 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = {
//   name: hintWebApp.name
//   scope: hintWebApp
//   properties: {
//     workspaceId: logAnalyticsWorkspace.id
//     metrics: [
//       {
//         category: 'AllMetrics'
//         enabled: true
//       }
//     ]
//   }
// }

resource hint 'Microsoft.App/containerApps@2024-03-01' = {
  name: hintWebAppName
  location: location
  properties: {
    managedEnvironmentId: containerAppsEnvironment.id
    configuration: {
      ingress: {
        external: true
        targetPort: 8080
        allowInsecure: true
      }
      secrets: [
        {
          name: 'avenir-access-token'
          value: avenirAccessToken
        }
      ]
    }
    template: {
      containers: [
        {
          name: 'hint'
          image: hintImage
          command: [
            '/entrypoint_azure'
          ]
          env: [
            {
              name: 'AVENIR_ACCESS_TOKEN'
              secretRef: 'avenir-access-token'
            }
            {
              name: 'APPLICATION_URL'
              value: 'https://${hintWebAppName}.${containerAppsEnvironment.properties.defaultDomain}'
            }
            {
              name: 'HINTR_URL'
              value: 'http://nm-hintr'
            }
            {
              name: 'DB_URL'
              value: 'jdbc:postgresql://${dbInfo.hostname}/${dbInfo.databaseName}'
            }
          ]
          resources: {
            cpu: json('2')
            memory: '4Gi'
          }
          volumeMounts: [
            {
              volumeName: uploadsVolume
              mountPath: '/uploads'
            }
            {
              volumeName: resultsVolume
              mountPath: '/results'
            }
            {
              volumeName: configVolume
              mountPath: '/etc/hint'
            }
          ]
        }
      ]
      scale: {
        minReplicas: 0
        maxReplicas: 1
      }
      volumes: [
        {
          name: uploadsVolume
          storageType: 'NfsAzureFile'
          storageName: storageModule.outputs.storageInfo.uploads.mountNameRW
        }
        {
          name: resultsVolume
          storageType: 'NfsAzureFile'
          storageName: storageModule.outputs.storageInfo.results.mountNameR
          mountOptions: 'nconnect=4,rsize=32768,wsize=32768,intr,noatime'
        }
        {
          name: configVolume
          storageType: 'NfsAzureFile'
          storageName: storageModule.outputs.storageInfo.config.mountNameRW
        }
      ]
    }
    workloadProfileName: 'Consumption'
  }
}
